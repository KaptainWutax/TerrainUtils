package kaptainwutax.v1_14;

import kaptainwutax.TestFramework;
import kaptainwutax.mcutils.state.Dimension;
import kaptainwutax.mcutils.version.MCVersion;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;

import static kaptainwutax.TestFramework.randomChunkGen;
import static kaptainwutax.TestFramework.randomHashGen;
import static kaptainwutax.TestFramework.testSinglePoint;

@DisplayName("Minecraft v1.14 Overworld")
@Tag("v1.14")
@TestFramework.Overworld
public class Overworld {
	public static final MCVersion VERSION = MCVersion.v1_14;
	public static final Dimension DIMENSION = Dimension.OVERWORLD;
	private static final int[] size16 ={
		48 ,38 ,54 ,66 ,87 ,45 ,39 ,57 ,72 ,48 ,78 ,73 ,76 ,32 ,69 ,43 ,
		38 ,102 ,71 ,78 ,64 ,82 ,47 ,69 ,71 ,35 ,68 ,37 ,46 ,68 ,37 ,33 ,
		72 ,60 ,47 ,77 ,74 ,64 ,57 ,45 ,98 ,64 ,83 ,80 ,65 ,32 ,86 ,75 ,
		48 ,69 ,66 ,64 ,35 ,52 ,64 ,77 ,39 ,102 ,68 ,73 ,65 ,56 ,67 ,65 ,
		80 ,33 ,70 ,72 ,64 ,38 ,71 ,62 ,83 ,65 ,61 ,67 ,75 ,37 ,68 ,66 ,
		61 ,86 ,47 ,68 ,68 ,64 ,69 ,100 ,82 ,47 ,63 ,64 ,55 ,51 ,72 ,77 ,
		70 ,46 ,71 ,36 ,62 ,42 ,72 ,75 ,51 ,62 ,75 ,47 ,45 ,39 ,65 ,72 ,
		60 ,74 ,63 ,64 ,70 ,62 ,64 ,64 ,78 ,67 ,31 ,64 ,76 ,56 ,64 ,77 ,
		40 ,36 ,47 ,42 ,64 ,57 ,35 ,79 ,31 ,74 ,60 ,64 ,38 ,66 ,65 ,38 ,
		47 ,81 ,35 ,65 ,54 ,90 ,43 ,91 ,49 ,46 ,32 ,66 ,34 ,59 ,84 ,70 ,
		66 ,65 ,48 ,63 ,47 ,64 ,75 ,35 ,80 ,60 ,68 ,70 ,58 ,69 ,71 ,63 ,
		48 ,46 ,79 ,62 ,47 ,56 ,72 ,67 ,83 ,32 ,67 ,44 ,68 ,50 ,38 ,67 ,
		70 ,60 ,59 ,68 ,71 ,45 ,38 ,96 ,40 ,41 ,69 ,114 ,47 ,102 ,67 ,47 ,
		72 ,32 ,68 ,46 ,48 ,76 ,62 ,63 ,34 ,30 ,42 ,70 ,36 ,31 ,31 ,54 ,
		69 ,70 ,46 ,36 ,31 ,66 ,72 ,37 ,73 ,63 ,44 ,32 ,74 ,36 ,72 ,63 ,
		62 ,64 ,50 ,64 ,38 ,38 ,69 ,71 ,61 ,69 ,46 ,68 ,61 ,33 ,68 ,39 ,
		};


	private static final int[] size32 = {
		48 ,38 ,54 ,66 ,87 ,45 ,39 ,57 ,72 ,48 ,78 ,73 ,76 ,32 ,69 ,43 ,38 ,102 ,71 ,78 ,64 ,82 ,47 ,69 ,71 ,35 ,68 ,37 ,46 ,68 ,37 ,33 ,
		72 ,60 ,47 ,77 ,74 ,64 ,57 ,45 ,98 ,64 ,83 ,80 ,65 ,32 ,86 ,75 ,48 ,69 ,66 ,64 ,35 ,52 ,64 ,77 ,39 ,102 ,68 ,73 ,65 ,56 ,67 ,65 ,
		80 ,33 ,70 ,72 ,64 ,38 ,71 ,62 ,83 ,65 ,61 ,67 ,75 ,37 ,68 ,66 ,61 ,86 ,47 ,68 ,68 ,64 ,69 ,100 ,82 ,47 ,63 ,64 ,55 ,51 ,72 ,77 ,
		70 ,46 ,71 ,36 ,62 ,42 ,72 ,75 ,51 ,62 ,75 ,47 ,45 ,39 ,65 ,72 ,60 ,74 ,63 ,64 ,70 ,62 ,64 ,64 ,78 ,67 ,31 ,64 ,76 ,56 ,64 ,77 ,
		40 ,36 ,47 ,42 ,64 ,57 ,35 ,79 ,31 ,74 ,60 ,64 ,38 ,66 ,65 ,38 ,47 ,81 ,35 ,65 ,54 ,90 ,43 ,91 ,49 ,46 ,32 ,66 ,34 ,59 ,84 ,70 ,
		66 ,65 ,48 ,63 ,47 ,64 ,75 ,35 ,80 ,60 ,68 ,70 ,58 ,69 ,71 ,63 ,48 ,46 ,79 ,62 ,47 ,56 ,72 ,67 ,83 ,32 ,67 ,44 ,68 ,50 ,38 ,67 ,
		70 ,60 ,59 ,68 ,71 ,45 ,38 ,96 ,40 ,41 ,69 ,114 ,47 ,102 ,67 ,47 ,72 ,32 ,68 ,46 ,48 ,76 ,62 ,63 ,34 ,30 ,42 ,70 ,36 ,31 ,31 ,54 ,
		69 ,70 ,46 ,36 ,31 ,66 ,72 ,37 ,73 ,63 ,44 ,32 ,74 ,36 ,72 ,63 ,62 ,64 ,50 ,64 ,38 ,38 ,69 ,71 ,61 ,69 ,46 ,68 ,61 ,33 ,68 ,39 ,
		80 ,64 ,61 ,62 ,71 ,92 ,72 ,48 ,63 ,66 ,70 ,53 ,48 ,48 ,71 ,38 ,64 ,68 ,73 ,98 ,69 ,77 ,72 ,62 ,68 ,82 ,67 ,31 ,67 ,56 ,31 ,40 ,
		65 ,75 ,74 ,68 ,77 ,87 ,66 ,41 ,32 ,49 ,37 ,50 ,60 ,46 ,62 ,29 ,30 ,65 ,48 ,52 ,63 ,83 ,38 ,47 ,80 ,70 ,48 ,41 ,80 ,63 ,64 ,63 ,
		64 ,69 ,74 ,70 ,96 ,97 ,66 ,63 ,66 ,61 ,50 ,65 ,66 ,72 ,64 ,71 ,51 ,54 ,64 ,32 ,37 ,56 ,58 ,64 ,68 ,45 ,36 ,68 ,48 ,68 ,49 ,62 ,
		62 ,45 ,38 ,62 ,34 ,39 ,62 ,72 ,63 ,35 ,47 ,60 ,79 ,39 ,70 ,92 ,68 ,88 ,59 ,63 ,47 ,64 ,115 ,31 ,57 ,53 ,68 ,63 ,71 ,64 ,63 ,55 ,
		31 ,70 ,86 ,58 ,48 ,75 ,78 ,62 ,49 ,43 ,62 ,66 ,34 ,49 ,61 ,68 ,46 ,84 ,63 ,80 ,64 ,36 ,71 ,49 ,67 ,40 ,66 ,55 ,72 ,30 ,68 ,63 ,
		47 ,56 ,44 ,54 ,62 ,75 ,31 ,65 ,63 ,52 ,70 ,60 ,57 ,71 ,48 ,46 ,77 ,88 ,73 ,59 ,33 ,69 ,38 ,31 ,38 ,64 ,70 ,71 ,72 ,58 ,47 ,67 ,
		80 ,34 ,63 ,32 ,32 ,76 ,75 ,106 ,67 ,53 ,39 ,75 ,69 ,66 ,47 ,69 ,48 ,59 ,62 ,36 ,91 ,57 ,71 ,58 ,62 ,43 ,30 ,39 ,62 ,46 ,42 ,67 ,
		101 ,33 ,49 ,43 ,69 ,33 ,64 ,55 ,47 ,45 ,47 ,64 ,60 ,78 ,84 ,76 ,70 ,87 ,59 ,72 ,44 ,61 ,75 ,94 ,63 ,78 ,65 ,56 ,31 ,63 ,100 ,50 ,
		43 ,60 ,47 ,65 ,79 ,38 ,69 ,33 ,88 ,79 ,64 ,70 ,64 ,32 ,64 ,35 ,77 ,32 ,50 ,70 ,63 ,62 ,38 ,71 ,71 ,64 ,70 ,68 ,67 ,72 ,86 ,65 ,
		37 ,69 ,72 ,83 ,67 ,64 ,62 ,62 ,64 ,32 ,67 ,34 ,68 ,63 ,86 ,72 ,46 ,71 ,48 ,72 ,84 ,64 ,65 ,68 ,49 ,60 ,91 ,64 ,63 ,64 ,66 ,46 ,
		69 ,66 ,79 ,48 ,63 ,68 ,36 ,76 ,65 ,75 ,43 ,61 ,48 ,54 ,72 ,32 ,56 ,77 ,74 ,70 ,32 ,62 ,69 ,38 ,64 ,32 ,79 ,60 ,100 ,72 ,73 ,64 ,
		72 ,64 ,69 ,45 ,36 ,70 ,48 ,72 ,34 ,46 ,62 ,44 ,44 ,68 ,61 ,70 ,69 ,61 ,48 ,31 ,76 ,36 ,68 ,101 ,67 ,72 ,67 ,63 ,96 ,46 ,64 ,68 ,
		62 ,39 ,70 ,69 ,53 ,64 ,73 ,64 ,67 ,69 ,69 ,71 ,32 ,62 ,38 ,63 ,31 ,73 ,33 ,38 ,71 ,83 ,68 ,72 ,66 ,71 ,108 ,67 ,69 ,66 ,63 ,52 ,
		63 ,88 ,52 ,64 ,71 ,49 ,63 ,61 ,67 ,60 ,46 ,53 ,70 ,96 ,65 ,71 ,66 ,42 ,63 ,63 ,71 ,64 ,61 ,50 ,69 ,47 ,38 ,56 ,69 ,64 ,67 ,80 ,
		39 ,41 ,79 ,63 ,72 ,45 ,65 ,64 ,68 ,58 ,59 ,56 ,30 ,35 ,63 ,75 ,53 ,68 ,69 ,32 ,33 ,98 ,57 ,81 ,72 ,82 ,51 ,33 ,73 ,62 ,70 ,68 ,
		71 ,97 ,81 ,67 ,38 ,70 ,35 ,60 ,41 ,60 ,69 ,46 ,38 ,61 ,93 ,71 ,93 ,64 ,69 ,63 ,61 ,64 ,72 ,76 ,48 ,56 ,51 ,84 ,73 ,65 ,71 ,42 ,
		114 ,42 ,41 ,69 ,66 ,63 ,65 ,32 ,70 ,90 ,78 ,76 ,52 ,43 ,45 ,71 ,67 ,64 ,61 ,64 ,68 ,62 ,61 ,36 ,83 ,72 ,47 ,35 ,54 ,55 ,63 ,64 ,
		63 ,66 ,55 ,30 ,67 ,55 ,88 ,63 ,87 ,62 ,42 ,72 ,66 ,47 ,46 ,46 ,72 ,98 ,92 ,103 ,79 ,68 ,48 ,65 ,35 ,64 ,40 ,97 ,64 ,35 ,63 ,62 ,
		71 ,47 ,38 ,38 ,61 ,38 ,36 ,36 ,64 ,46 ,54 ,60 ,53 ,47 ,65 ,70 ,70 ,48 ,30 ,63 ,66 ,99 ,32 ,64 ,38 ,65 ,67 ,38 ,47 ,63 ,56 ,76 ,
		64 ,71 ,69 ,30 ,33 ,66 ,37 ,69 ,63 ,46 ,89 ,48 ,61 ,68 ,64 ,72 ,38 ,66 ,47 ,45 ,52 ,58 ,52 ,69 ,67 ,76 ,63 ,40 ,71 ,38 ,44 ,74 ,
		80 ,37 ,118 ,52 ,63 ,64 ,68 ,62 ,42 ,47 ,81 ,70 ,65 ,68 ,66 ,64 ,88 ,65 ,81 ,64 ,64 ,48 ,65 ,31 ,62 ,40 ,30 ,76 ,42 ,70 ,38 ,61 ,
		77 ,37 ,48 ,69 ,51 ,58 ,82 ,66 ,62 ,89 ,66 ,69 ,56 ,43 ,68 ,62 ,84 ,64 ,61 ,70 ,70 ,52 ,56 ,64 ,63 ,85 ,64 ,60 ,47 ,77 ,63 ,92 ,
		64 ,32 ,47 ,64 ,65 ,56 ,38 ,68 ,68 ,72 ,67 ,66 ,45 ,56 ,63 ,65 ,79 ,31 ,47 ,69 ,41 ,77 ,62 ,35 ,60 ,54 ,79 ,76 ,62 ,86 ,32 ,70 ,
		63 ,47 ,63 ,66 ,68 ,34 ,62 ,90 ,69 ,71 ,72 ,43 ,36 ,64 ,65 ,54 ,84 ,60 ,75 ,70 ,72 ,56 ,84 ,66 ,66 ,62 ,57 ,73 ,53 ,66 ,73 ,71 ,
		};

	@Test
	@DisplayName("Test Height map version 1.14 size 16")
	public void size16() {
		randomChunkGen(VERSION, 32132132131332132L, DIMENSION, 16, 21382138983289132L, size16);
	}

	@Test
	@DisplayName("Test Height version 1.14 map size 32")
	public void size32() {
		randomChunkGen(VERSION, 32132132131332132L, DIMENSION, 32, 21382138983289132L, size32);
	}

	@Test
	@DisplayName("Test Height version 1.14 map size 128")
	public void size128() {
		randomHashGen(VERSION, 909789878979231009L, DIMENSION, 128, 21382138983289132L, 4714728801832852039L);
	}


	// 		  Bootstrap.register();
	//        long seed = 909789878979231009L;
	//        World world=new ClientWorld(null,
	//                new WorldSettings(
	//                        seed,
	//                        GameType.NOT_SET,
	//                        false,
	//                        false,
	//                        WorldType.DEFAULT),
	//                DimensionType.OVERWORLD,
	//                0,
	//                null,
	//                null);
	//        OverworldBiomeProviderSettings OWSettings = BiomeProviderType.VANILLA_LAYERED
	//                .createSettings()
	//                .setWorldInfo(world.getWorldInfo())
	//                .setGeneratorSettings(new OverworldGenSettings());
	//        OverworldChunkGenerator overworldChunkGenerator=new OverworldChunkGenerator(world,BiomeProviderType.VANILLA_LAYERED.create(OWSettings),new OverworldGenSettings());
	//        int size = 128;
	//        int yy = overworldChunkGenerator.getHeightOnGround(266774 ,201908, Heightmap.Type.OCEAN_FLOOR_WG);
	//        Random r = new Random(21382138983289132L);
	//        boolean PRINT = false;
	//        if (PRINT) System.out.println("{");
	//        long hash = 0;
	//        for (int i = 0; i < size; i++) {
	//            for (int j = 0; j < size; j++) {
	//                int x = r.nextInt(512000)-25600;
	//                int z = r.nextInt(512000)-25600;
	//                int y = overworldChunkGenerator.getHeightOnGround(x, z, Heightmap.Type.OCEAN_FLOOR_WG);
	//                hash = hash * 0xFF51AFD7ED558CCDL + 0xC4CEB9FE1A85EC53L | y;
	//                if (PRINT) System.out.printf("%d ,", y);
	//                System.out.println(hash+" "+y);
	//
	//            }
	//            if (PRINT) System.out.println();
	//        }
	//        if (PRINT) System.out.print("};");
	//        if (PRINT) System.out.println();
	//        if (!PRINT) System.out.println(hash+"L");
}
