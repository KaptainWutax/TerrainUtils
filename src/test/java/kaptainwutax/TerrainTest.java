package kaptainwutax;

import kaptainwutax.biomeutils.source.OverworldBiomeSource;
import kaptainwutax.terrainutils.terrain.OverworldChunkGenerator;
import kaptainwutax.terrainutils.ChunkGenerator;
import kaptainwutax.seedutils.mc.Dimension;
import kaptainwutax.seedutils.mc.MCVersion;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.Random;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TerrainTest {
    private static final int[] heightmap_14 = {
            46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 45,
            46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
            46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
            46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
            46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
            46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
            46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
            45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
            45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
            45, 45, 45, 46, 46, 46, 46, 46, 47, 46, 46, 46, 46, 46, 46, 46,
            44, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47,
            44, 45, 45, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
            44, 44, 45, 46, 46, 46, 47, 47, 48, 48, 48, 48, 48, 48, 47, 47,
            43, 45, 45, 46, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 47, 47,
            43, 45, 46, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47,
            43, 45, 46, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 46
    };

    private static final int[] heightmap_16 = {
            75, 64, 56, 78, 65, 90, 59, 59, 66, 62, 71, 61, 64, 64, 76, 61,
            79, 55, 65, 66, 61, 65, 78, 61, 62, 92, 63, 58, 79, 60, 56, 69,
            65, 63, 63, 65, 63, 64, 111, 129, 60, 71, 65, 57, 70, 61, 64, 63,
            68, 73, 62, 80, 78, 63, 67, 73, 71, 68, 68, 98, 62, 112, 61, 64,
            71, 90, 63, 80, 76, 62, 62, 56, 69, 60, 67, 77, 64, 66, 107, 74,
            60, 65, 59, 63, 76, 100, 60, 92, 78, 76, 75, 64, 71, 60, 111, 64,
            59, 99, 66, 65, 64, 73, 72, 77, 60, 59, 88, 66, 63, 70, 64, 63,
            85, 61, 67, 106, 61, 67, 62, 58, 77, 61, 64, 63, 69, 69, 62, 64,
            73, 80, 63, 63, 91, 68, 69, 68, 64, 102, 60, 69, 103, 62, 67, 61,
            68, 128, 68, 63, 62, 105, 72, 68, 125, 70, 62, 71, 58, 62, 59, 98,
            62, 64, 64, 64, 74, 69, 80, 62, 64, 64, 69, 71, 61, 73, 79, 65,
            83, 74, 60, 70, 89, 64, 79, 84, 60, 63, 61, 66, 61, 71, 67, 58,
            62, 64, 60, 60, 62, 70, 64, 65, 79, 72, 72, 64, 60, 69, 73, 60,
            72, 63, 64, 58, 64, 73, 63, 61, 61, 72, 66, 66, 59, 65, 63, 61,
            73, 69, 67, 58, 60, 67, 59, 60, 78, 61, 62, 73, 67, 61, 72, 64,
            60, 67, 74, 62, 61, 59, 75, 56, 63, 56, 71, 80, 67, 75, 69, 117
    };

    private static final int[] heightmap_16_2 = {
            69, 70, 75, 63, 63, 64, 64, 75, 63, 63, 63, 66, 63, 74, 63, 73, 63, 89, 63, 69, 70, 63, 63, 80, 63, 64, 84, 63, 64, 63, 106, 105,
            68, 74, 63, 63, 96, 83, 64, 74, 63, 64, 63, 94, 72, 63, 63, 63, 78, 83, 67, 65, 75, 64, 63, 69, 79, 70, 63, 70, 63, 64, 69, 63,
            67, 66, 63, 79, 71, 63, 63, 75, 64, 63, 106, 66, 63, 63, 63, 63, 90, 71, 78, 73, 63, 67, 63, 63, 65, 68, 63, 70, 63, 107, 63, 82,
            64, 63, 73, 65, 63, 63, 63, 70, 75, 63, 65, 64, 63, 63, 72, 63, 63, 63, 66, 63, 63, 63, 77, 69, 63, 63, 63, 71, 63, 70, 98, 70,
            63, 63, 63, 73, 63, 78, 64, 68, 64, 68, 73, 64, 64, 63, 63, 63, 63, 84, 74, 63, 66, 78, 69, 63, 63, 70, 63, 63, 63, 107, 63, 63,
            63, 63, 104, 71, 108, 63, 64, 63, 67, 63, 63, 63, 63, 79, 109, 78, 129, 64, 73, 63, 72, 63, 92, 63, 67, 63, 73, 63, 69, 68, 63, 63,
            63, 63, 69, 77, 99, 63, 75, 63, 63, 70, 64, 71, 63, 67, 64, 63, 69, 72, 69, 65, 65, 63, 64, 64, 73, 63, 79, 64, 68, 87, 63, 65,
            65, 68, 63, 70, 66, 78, 64, 64, 72, 67, 86, 68, 131, 67, 63, 63, 63, 63, 67, 84, 65, 65, 64, 68, 63, 95, 63, 71, 64, 65, 83, 63,
            69, 63, 65, 105, 63, 89, 63, 65, 63, 69, 72, 70, 76, 64, 76, 63, 63, 63, 72, 64, 68, 64, 63, 63, 68, 99, 63, 64, 63, 74, 63, 63,
            71, 69, 75, 64, 68, 79, 73, 64, 111, 63, 77, 64, 68, 64, 63, 68, 64, 63, 63, 63, 64, 64, 63, 63, 70, 67, 68, 72, 69, 65, 85, 69,
            63, 63, 64, 63, 63, 79, 64, 74, 63, 63, 63, 75, 63, 63, 64, 64, 63, 77, 63, 63, 78, 65, 63, 63, 69, 63, 63, 63, 65, 63, 66, 76,
            76, 104, 79, 63, 63, 79, 70, 103, 63, 63, 76, 63, 68, 63, 63, 63, 77, 68, 63, 77, 63, 102, 63, 63, 63, 64, 63, 66, 76, 64, 63, 63,
            76, 98, 63, 64, 63, 63, 63, 63, 63, 73, 64, 63, 71, 74, 63, 64, 64, 63, 63, 63, 101, 108, 63, 63, 76, 63, 63, 72, 63, 63, 70, 75,
            63, 63, 69, 77, 63, 63, 63, 96, 63, 67, 69, 63, 63, 64, 106, 73, 65, 63, 75, 71, 77, 69, 68, 69, 63, 67, 64, 63, 71, 71, 68, 72,
            74, 63, 63, 65, 63, 81, 63, 63, 63, 63, 71, 63, 63, 75, 63, 63, 64, 70, 63, 63, 63, 69, 77, 63, 69, 63, 63, 64, 63, 63, 105, 67,
            71, 69, 64, 67, 71, 69, 63, 65, 74, 63, 63, 72, 64, 67, 64, 71, 63, 73, 66, 65, 63, 63, 63, 80, 76, 68, 64, 63, 65, 103, 86, 63,
            78, 107, 63, 63, 64, 68, 63, 64, 79, 64, 63, 93, 63, 63, 65, 63, 66, 63, 65, 63, 65, 72, 63, 107, 69, 63, 64, 72, 63, 111, 89, 69,
            74, 80, 63, 63, 63, 66, 63, 63, 89, 63, 70, 66, 67, 63, 63, 63, 67, 63, 63, 63, 63, 63, 64, 63, 65, 63, 106, 87, 125, 66, 77, 107,
            75, 63, 75, 63, 63, 75, 68, 74, 79, 63, 71, 63, 63, 65, 73, 63, 97, 73, 68, 63, 79, 63, 63, 66, 69, 65, 109, 71, 111, 63, 63, 63,
            71, 80, 64, 70, 63, 106, 67, 63, 64, 64, 64, 63, 104, 64, 89, 63, 64, 64, 63, 70, 67, 70, 67, 63, 63, 63, 64, 72, 63, 68, 64, 72,
            103, 71, 76, 63, 63, 74, 69, 65, 72, 76, 78, 67, 71, 63, 63, 64, 87, 68, 64, 65, 76, 63, 128, 82, 63, 65, 63, 78, 63, 67, 75, 64,
            76, 65, 64, 94, 71, 63, 64, 71, 63, 74, 64, 83, 67, 69, 63, 64, 79, 68, 63, 73, 63, 64, 63, 65, 68, 80, 73, 63, 76, 63, 63, 63,
            63, 64, 95, 68, 63, 85, 72, 78, 69, 76, 63, 63, 64, 63, 63, 63, 63, 63, 65, 65, 63, 63, 63, 63, 63, 83, 63, 63, 63, 84, 113, 69,
            73, 63, 64, 63, 67, 63, 63, 63, 65, 64, 64, 107, 63, 65, 65, 72, 73, 63, 63, 100, 72, 63, 63, 73, 64, 63, 63, 75, 63, 72, 105, 67,
            63, 73, 63, 63, 68, 101, 67, 74, 74, 81, 63, 80, 74, 63, 63, 64, 64, 63, 63, 74, 73, 66, 89, 73, 63, 63, 63, 64, 67, 73, 70, 63,
            67, 66, 107, 72, 95, 78, 63, 65, 63, 68, 63, 63, 68, 63, 65, 63, 72, 71, 73, 64, 63, 64, 64, 63, 65, 63, 67, 63, 93, 65, 63, 65,
            66, 63, 64, 63, 67, 63, 64, 64, 106, 71, 65, 65, 69, 63, 66, 64, 80, 64, 63, 64, 67, 63, 109, 86, 68, 63, 63, 84, 70, 81, 63, 65,
            63, 63, 63, 63, 82, 63, 64, 63, 63, 83, 71, 110, 63, 66, 64, 63, 63, 71, 64, 63, 65, 94, 63, 66, 83, 82, 63, 64, 63, 74, 74, 63,
            66, 67, 72, 71, 70, 67, 68, 78, 75, 65, 63, 82, 66, 63, 71, 63, 64, 89, 67, 94, 85, 67, 70, 64, 93, 103, 63, 64, 69, 63, 79, 63,
            63, 63, 65, 81, 71, 63, 66, 64, 63, 63, 63, 63, 92, 69, 63, 63, 63, 63, 69, 63, 63, 78, 63, 68, 76, 78, 64, 78, 77, 64, 75, 63,
            63, 104, 63, 98, 64, 71, 63, 63, 64, 65, 68, 76, 67, 63, 76, 69, 64, 63, 63, 63, 64, 106, 74, 63, 63, 109, 64, 63, 63, 64, 71, 63,
            69, 63, 63, 76, 84, 66, 63, 69, 63, 94, 71, 104, 70, 63, 78, 68, 75, 64, 63, 63, 63, 72, 64, 63, 63, 63, 63, 63, 63, 63, 64, 64
    };


    @Test
    @DisplayName("Test Height map for 1.14")
    public void testHeight() {
        OverworldBiomeSource bs = new OverworldBiomeSource(MCVersion.v1_14, 1L);
        OverworldChunkGenerator cg = (OverworldChunkGenerator) ChunkGenerator.of(Dimension.OVERWORLD, bs);
        for (int i = 0; i < 16 * 16; i++) {
            assertEquals(heightmap_14[i], cg.getHeightOnGround(i / 16, i % 16));
        }

    }

    @Test
    @DisplayName("Test Height map for 1.16")
    public void test1_16() {
        OverworldBiomeSource bs = new OverworldBiomeSource(MCVersion.v1_16, 541515181818L);
        ChunkGenerator cg = ChunkGenerator.of(Dimension.OVERWORLD, bs);
        int size = 16;
        assert cg != null;
        Random r = new Random(4227552225777L);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                int x = r.nextInt(512);
                int z = r.nextInt(512);
                int y = cg.getHeightOnGround(x, z);
                System.out.println(x + " " + z);
                assertEquals(heightmap_16[i * size + j], y);

            }
        }
    }

    @Test
    @DisplayName("Test Height map 2 for 1.16")
    public void test1_16_2() {
        // NOT CORRECT YET FIXME
        OverworldBiomeSource bs = new OverworldBiomeSource(MCVersion.v1_16, 541515181818L);
        ChunkGenerator cg = ChunkGenerator.of(Dimension.OVERWORLD, bs);
        int size = 32;
        assert cg != null;
        Random r = new Random(21382138983289132L);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                int x = r.nextInt(512);
                int z = r.nextInt(512);
                int y = cg.getHeightOnGround(x, z);
                System.out.println(x + " " + z);
                assertEquals(heightmap_16_2[i * size + j], y);

            }
        }
    }

    @Test
    public void test_32123() {
        OverworldBiomeSource bs = new OverworldBiomeSource(MCVersion.v1_16, 541515181818L);
        ChunkGenerator cg = ChunkGenerator.of(Dimension.OVERWORLD, bs);
        int y = cg.getHeightOnGround(203, 49);
        System.out.println(y);
    }


}
